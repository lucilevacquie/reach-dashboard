{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/cli/index.ts"],"names":[],"mappings":";AAEA,OAAO,SAAS,MAAM,WAAW,CAAC;AAClC,OAAO,QAAQ,MAAM,UAAU,CAAC;AAChC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAC,mBAAmB,EAAC,MAAM,4BAA4B,CAAC;AAS/D,SAAS;KACN,MAAM,CAAC,uBAAuB,EAAE,sDAAsD,CAAC;KACvF,MAAM,CACL,uBAAuB,EACvB,mDAAmD,EACnD,2BAA2B,CAC5B;KACA,MAAM,CACL,iCAAiC,EACjC,yDAAyD,CAC1D;KACA,MAAM,CACL,2BAA2B,EAC3B,mEAAmE,CACpE;KACA,MAAM,CAAC,UAAC,EAAuE;QAAtE,MAAM,YAAA,EAAE,MAAM,YAAA,EAAE,WAAW,iBAAA,EAAE,QAAQ,cAAA;IAC7C,IAAI,MAAM,EAAE;QACV,KAAK,IAAI,mBAAmB,CAAC;YAC3B,cAAc,EAAE,MAAM;YACtB,cAAc,EAAE,MAAM;YACtB,qBAAqB,EAAE,WAAW;YAClC,qBAAqB,EAAE,QAAQ;SAChC,CAAC,CAAC,KAAK,EAAE,CAAC;KACZ;SAAM;QACL,QAAQ;aACL,MAAM,CAAC;YACN;gBACE,IAAI,EAAE,gBAAgB;gBACtB,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,oBAAoB;gBAC7B,OAAO,EAAE,iCAAiC;aAC3C;YACD;gBACE,IAAI,EAAE,gBAAgB;gBACtB,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,2BAA2B;gBACpC,OAAO,EAAE,uCAAuC;aACjD;YACD;gBACE,IAAI,EAAE,uBAAuB;gBAC7B,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,gDAAgD;aAC1D;YACD;gBACE,IAAI,EAAE,uBAAuB;gBAC7B,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,mEAAmE;aAC7E;SACF,CAAC;aACD,IAAI,CAAC,UAAC,OAAwB;YAC7B,KAAK,IAAI,mBAAmB,CAAC;gBAC3B,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;gBACpD,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;aACrD,CAAC,CAAC,KAAK,EAAE,CAAC;QACb,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,KAAK;YACV,IAAI,KAAK,CAAC,UAAU,EAAE;gBACpB,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,wDAAwD,CAAC,CAAC,CAAC;aACrF;iBAAM;gBACL,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC,CAAC;aACnE;QACH,CAAC,CAAC,CAAC;KACN;AACH,CAAC,CAAC,CAAC;AAEL,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC","sourcesContent":["#!/usr/bin/env node\n\nimport commander from 'commander';\nimport inquirer from 'inquirer';\nimport colors from 'colors';\nimport {GeneratedFileWriter} from './core/GeneratedFileWriter';\n\ninterface InquirerAnswers {\n  configFilename: string;\n  customClassesTypeName: string | void;\n  customClassesFilename: string | void;\n  outputFilename: string | void;\n}\n\ncommander\n  .option('-c, --config <config>', 'Name or relative path of the TailwindCSS config file')\n  .option(\n    '-o, --output <output>',\n    'Name or relative path of the generated types file',\n    'tailwindcss-classnames.ts',\n  )\n  .option(\n    '-f, --classesFile <classesFile>',\n    'Name or relative path of the file with the custom types',\n  )\n  .option(\n    '-t, --typeName <typeName>',\n    'Name of the type exported from file containing the custom classes',\n  )\n  .action(({config, output, classesFile, typeName}: {[key: string]: string | void}) => {\n    if (config) {\n      void new GeneratedFileWriter({\n        configFilename: config,\n        outputFilename: output,\n        customClassesFilename: classesFile,\n        customClassesTypeName: typeName,\n      }).write();\n    } else {\n      inquirer\n        .prompt([\n          {\n            name: 'configFilename',\n            type: 'input',\n            default: 'tailwind.config.js',\n            message: 'Tailwind configuration filename',\n          },\n          {\n            name: 'outputFilename',\n            type: 'input',\n            default: 'tailwindcss-classnames.ts',\n            message: 'Name of the file with generated types',\n          },\n          {\n            name: 'customClassesFilename',\n            type: 'input',\n            default: null,\n            message: 'Name or path of the file with the custom types',\n          },\n          {\n            name: 'customClassesTypeName',\n            type: 'input',\n            default: null,\n            message: 'Name of the type exported from file containing the custom classes',\n          },\n        ])\n        .then((answers: InquirerAnswers) => {\n          void new GeneratedFileWriter({\n            configFilename: answers.configFilename,\n            outputFilename: answers.outputFilename,\n            customClassesFilename: answers.customClassesFilename,\n            customClassesTypeName: answers.customClassesTypeName,\n          }).write();\n        })\n        .catch(error => {\n          if (error.isTtyError) {\n            console.error(colors.red(\"Prompt couldn't be rendered in the current environment\"));\n          } else {\n            console.error(colors.red('Something went wrong with the prompt'));\n          }\n        });\n    }\n  });\n\ncommander.parse(process.argv);\n"]}