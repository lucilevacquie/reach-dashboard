/* eslint-disable @typescript-eslint/restrict-template-expressions */
import { __awaiter, __generator } from "tslib";
import { promises as fs } from 'fs';
import colors from 'colors';
import { baseTemplateString } from '../lib/baseTemplateString';
import { ClassesGenerator } from './ClassesGenerator';
var GeneratedFileWriter = /** @class */ (function () {
    function GeneratedFileWriter(options) {
        var _this = this;
        this.configFileData = '';
        this.write = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.missingCliOptionError().length > 0)
                            return [2 /*return*/, console.error(this.missingCliOptionError().red)];
                        return [4 /*yield*/, this.readTailwindConfigFile()];
                    case 1:
                        _a.sent();
                        fs.writeFile("" + this.outputFilename, this.generateFileContent(), 'utf8').catch(function (error) {
                            console.error(colors.red(error));
                        });
                        return [2 /*return*/];
                }
            });
        }); };
        this.missingCliOptionError = function () {
            if (!_this.configFilename)
                return 'tailwindcss config file name or path is not provided';
            if (!_this.outputFilename)
                return 'Please provide a valid filename to add generated types to it';
            if (_this.customClassesTypeName && !_this.customClassesFilename)
                return 'Please provide the file containing custom classes';
            if (_this.customClassesFilename && !_this.customClassesTypeName)
                return 'Please provide the name of the exported custom type';
            return '';
        };
        this.readTailwindConfigFile = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        _a = this;
                        return [4 /*yield*/, fs.readFile("./" + this.configFilename, { encoding: 'utf-8' })];
                    case 1:
                        _a.configFileData = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        err_1 = _b.sent();
                        console.error(("Error Reading: \"./" + this.configFilename + "\"").red);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        this.generateFileContent = function () {
            return baseTemplateString
                .replace(/___ALL_CLASSES___/g, new ClassesGenerator(eval(_this.configFileData.replace(/(['"])?plugins(['"])? *: *\[(.*|\n)*?],?/g, ''))).generate())
                .replace(/CUSTOM_FORMS_PLUGIN_TYPE/g, _this.configFileData.includes('@tailwindcss/custom-forms')
                ? '\n  | TCustomFormsPluginClasses'
                : '')
                .replace(/TYPOGRAPHY_PLUGIN_TYPE/g, _this.configFileData.includes('@tailwindcss/typography')
                ? '\n  | TTypographyPluginClasses'
                : '')
                .replace(/IMPORTED_T_CUSTOM_CLASSES/g, _this.isCustomClassesAdded ? '\n  | TCustomClassesFromExternalFile' : '')
                .replace(/T_CUSTOM_CLASSES_IMPORT_STATEMENT/g, _this.isCustomClassesAdded
                ? "import {" + _this.customClassesTypeName + " as TCustomClassesFromExternalFile} from './" + _this.customClassesFilename + "';"
                : '');
        };
        this.configFilename = options.configFilename;
        this.outputFilename = options.outputFilename;
        this.customClassesFilename = options.customClassesFilename;
        this.customClassesTypeName = options.customClassesTypeName;
        this.isCustomClassesAdded = !!(this.customClassesFilename && this.customClassesTypeName);
    }
    return GeneratedFileWriter;
}());
export { GeneratedFileWriter };
//# sourceMappingURL=GeneratedFileWriter.js.map