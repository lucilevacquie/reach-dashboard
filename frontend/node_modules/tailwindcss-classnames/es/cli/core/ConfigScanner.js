import { __assign } from "tslib";
import _ from 'lodash';
import { defaultTailwindConfig } from '../lib/defaultTailwindConfig';
/* eslint-disable @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-return */
var ConfigScanner = /** @class */ (function () {
    function ConfigScanner(tailwindConfig) {
        var _this = this;
        var _a;
        this.getPrefix = function () { return _this.prefix; };
        this.getSeparator = function () { return _this.separator; };
        this.getDeprecations = function () { return _this.future; };
        this.getTheme = function () {
            var _a;
            var evaluateCoreTheme = function () {
                var coreTheme = _.omit(_this.themeConfig, 'extend');
                var valueEvaluator = new ThemeClosuresEvaluator(coreTheme);
                for (var _i = 0, _a = Object.entries(_this.themeConfig); _i < _a.length; _i++) {
                    var _b = _a[_i], key = _b[0], value = _b[1];
                    coreTheme[key] = valueEvaluator.evaluate(value);
                }
                return coreTheme;
            };
            var evaluateThemeExtend = function () {
                var themeExtend = _this.themeConfig.extend;
                if (themeExtend) {
                    var valueEvaluator = new ThemeClosuresEvaluator(themeExtend);
                    for (var _i = 0, _a = Object.entries(themeExtend); _i < _a.length; _i++) {
                        var _b = _a[_i], key = _b[0], value = _b[1];
                        themeExtend[key] = valueEvaluator.evaluate(value);
                    }
                }
                return themeExtend;
            };
            _this.themeConfig = _.merge(evaluateCoreTheme(), evaluateThemeExtend());
            (_a = _this.themeConfig) === null || _a === void 0 ? true : delete _a.extend;
            return _this.themeConfig;
        };
        this.getVariants = function () { return _this.variantsConfig; };
        this.getThemeProperty = function (themeProperty) {
            return [
                Object.keys(_this.getTheme()[themeProperty]),
                Object.values(_this.getTheme()[themeProperty]),
            ];
        };
        this.future = (_a = tailwindConfig === null || tailwindConfig === void 0 ? void 0 : tailwindConfig.future) !== null && _a !== void 0 ? _a : {};
        this.prefix = _.isEmpty(tailwindConfig === null || tailwindConfig === void 0 ? void 0 : tailwindConfig.prefix) ? '' : tailwindConfig.prefix;
        this.separator = _.isEmpty(tailwindConfig.separator)
            ? ':'
            : tailwindConfig.separator;
        this.variantsConfig = _.isEmpty(tailwindConfig.variants)
            ? defaultTailwindConfig.variants // Order does matter, defaultVariants will be overridden by themeVariants.
            : __assign(__assign({}, defaultTailwindConfig.variants), tailwindConfig.variants);
        this.themeConfig = __assign(__assign({}, defaultTailwindConfig.theme), tailwindConfig.theme);
    }
    return ConfigScanner;
}());
export { ConfigScanner };
var ThemeClosuresEvaluator = /** @class */ (function () {
    function ThemeClosuresEvaluator(themeConfig) {
        var _this = this;
        this.themeConfig = themeConfig;
        this.theme = function (path) {
            return _.get(_this.themeConfig, _.trim(path, "'\""));
        };
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ThemeClosuresEvaluator.prototype.evaluate = function (value) {
        if (_.isFunction(value)) {
            return value(this.theme, {
                negative: ThemeClosuresEvaluator.negative.bind(this),
                breakpoints: ThemeClosuresEvaluator.breakpoints.bind(this),
            });
        }
        else {
            return value;
        }
    };
    ThemeClosuresEvaluator.negative = function (item) {
        var itemCopy = __assign({}, item);
        for (var _i = 0, _a = Object.entries(itemCopy); _i < _a.length; _i++) {
            var key = _a[_i][0];
            itemCopy['-' + key] = itemCopy[key];
            delete itemCopy[key];
        }
        return itemCopy;
    };
    ThemeClosuresEvaluator.breakpoints = function (item) {
        var itemCopy = __assign({}, item);
        for (var _i = 0, _a = Object.entries(itemCopy); _i < _a.length; _i++) {
            var key = _a[_i][0];
            itemCopy['screen-' + key] = itemCopy[key];
            delete itemCopy[key];
        }
        return itemCopy;
    };
    return ThemeClosuresEvaluator;
}());
//# sourceMappingURL=ConfigScanner.js.map