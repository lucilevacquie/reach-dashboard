{"version":3,"file":"GeneratedFileWriter.js","sourceRoot":"","sources":["../../../src/cli/core/GeneratedFileWriter.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\nimport {promises as fs} from 'fs';\nimport colors from 'colors';\nimport {baseTemplateString} from '../lib/baseTemplateString';\nimport {ClassesGenerator} from './ClassesGenerator';\n\ntype CliArguments = {\n  configFilename: string | void;\n  outputFilename: string | void;\n  customClassesFilename: string | void;\n  customClassesTypeName: string | void;\n};\n\nexport class GeneratedFileWriter {\n  private readonly configFilename: string | void;\n  private readonly outputFilename: string | void;\n  private readonly customClassesFilename: string | void;\n  private readonly customClassesTypeName: string | void;\n  private readonly isCustomClassesAdded: boolean;\n  private configFileData = '';\n\n  constructor(options: CliArguments) {\n    this.configFilename = options.configFilename;\n    this.outputFilename = options.outputFilename;\n    this.customClassesFilename = options.customClassesFilename;\n    this.customClassesTypeName = options.customClassesTypeName;\n    this.isCustomClassesAdded = !!(this.customClassesFilename && this.customClassesTypeName);\n  }\n\n  public write = async (): Promise<void> => {\n    if (this.missingCliOptionError().length > 0)\n      return console.error(this.missingCliOptionError().red);\n\n    await this.readTailwindConfigFile();\n\n    fs.writeFile(`${this.outputFilename}`, this.generateFileContent(), 'utf8').catch(error => {\n      console.error(colors.red(error));\n    });\n  };\n\n  private missingCliOptionError = (): string => {\n    if (!this.configFilename) return 'tailwindcss config file name or path is not provided';\n    if (!this.outputFilename) return 'Please provide a valid filename to add generated types to it';\n    if (this.customClassesTypeName && !this.customClassesFilename)\n      return 'Please provide the file containing custom classes';\n    if (this.customClassesFilename && !this.customClassesTypeName)\n      return 'Please provide the name of the exported custom type';\n\n    return '';\n  };\n\n  private readTailwindConfigFile = async (): Promise<void> => {\n    try {\n      this.configFileData = await fs.readFile(`./${this.configFilename}`, {encoding: 'utf-8'});\n    } catch (err) {\n      console.error(`Error Reading: \"./${this.configFilename}\"`.red);\n    }\n  };\n\n  private generateFileContent = (): string => {\n    return baseTemplateString\n      .replace(\n        /___ALL_CLASSES___/g,\n        new ClassesGenerator(\n          eval(this.configFileData.replace(/(['\"])?plugins(['\"])? *: *\\[(.*|\\n)*?],?/g, '')),\n        ).generate(),\n      )\n      .replace(\n        /CUSTOM_FORMS_PLUGIN_TYPE/g,\n        this.configFileData.includes('@tailwindcss/custom-forms')\n          ? '\\n  | TCustomFormsPluginClasses'\n          : '',\n      )\n      .replace(\n        /TYPOGRAPHY_PLUGIN_TYPE/g,\n        this.configFileData.includes('@tailwindcss/typography')\n          ? '\\n  | TTypographyPluginClasses'\n          : '',\n      )\n      .replace(\n        /IMPORTED_T_CUSTOM_CLASSES/g,\n        this.isCustomClassesAdded ? '\\n  | TCustomClassesFromExternalFile' : '',\n      )\n      .replace(\n        /T_CUSTOM_CLASSES_IMPORT_STATEMENT/g,\n        this.isCustomClassesAdded\n          ? `import {${this.customClassesTypeName} as TCustomClassesFromExternalFile} from './${this.customClassesFilename}';`\n          : '',\n      );\n  };\n}\n"]}