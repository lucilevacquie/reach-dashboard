{"version":3,"file":"ClassesGroupTemplateGenerator.js","sourceRoot":"","sources":["../../../src/cli/core/ClassesGroupTemplateGenerator.ts"],"names":[],"mappings":";;;AACA,kCAA8D;AAI9D;IAME,uCAAY,KAAmB,EAAE,SAAiB,EAAE,YAAoB;QAAxE,iBAKC;QAEM,aAAQ,GAAG;YAChB,OAAO,KAAI,CAAC,yBAAyB,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,KAAI,CAAC,sBAAsB,EAAE,CAAC;QAChG,CAAC,CAAC;QAEM,8BAAyB,GAAG;YAClC,OAAO,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM;gBAC5B,OAAO,kBAAgB,6BAAqB,CAAC,MAAM,CAAC,WAAM,qBAAa,CACrE,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAClB,KAAI,CAAC,YAAY,CAClB,MAAG,CAAC;YACP,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEM,2BAAsB,GAAG;YAC/B,IAAM,8BAA8B,GAAG;gBACrC,OAAA,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,GAAG,GAAG,6BAAqB,CAAC,MAAM,CAAC,EAAnC,CAAmC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;YAA9E,CAA8E,CAAC;YAEjF,OAAO,CACL,kBAAgB,6BAAqB,CAAC,KAAI,CAAC,SAAS,CAAC,OAAI;gBACzD,QAAQ;gBACR,8BAA8B,EAAE;gBAChC,IAAI,CACL,CAAC;QACJ,CAAC,CAAC;QA7BA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IA0BH,oCAAC;AAAD,CAAC,AArCD,IAqCC;AArCY,sEAA6B","sourcesContent":["import {IGenerator} from './IGenerator';\nimport {capitalizeFirstLetter, generateTypes} from '../utils';\n\ntype ClassesGroup = {[key: string]: string[]};\n\nexport class ClassesGroupTemplateGenerator implements IGenerator {\n  private readonly group: ClassesGroup;\n  private readonly groupName: string;\n  private readonly configPrefix: string;\n  private members: string[];\n\n  constructor(group: ClassesGroup, groupName: string, configPrefix: string) {\n    this.group = group;\n    this.groupName = groupName;\n    this.configPrefix = configPrefix;\n    this.members = Object.keys(this.group);\n  }\n\n  public generate = (): string => {\n    return this.generateMembersStatements().join('\\n\\n') + '\\n\\n' + this.generateGroupStatement();\n  };\n\n  private generateMembersStatements = (): string[] => {\n    return this.members.map(member => {\n      return `export type T${capitalizeFirstLetter(member)} = ${generateTypes(\n        this.group[member],\n        this.configPrefix,\n      )};`;\n    });\n  };\n\n  private generateGroupStatement = (): string => {\n    const getMembersStatementsReferences = (): string =>\n      this.members.map(member => 'T' + capitalizeFirstLetter(member)).join('\\n  | ');\n\n    return (\n      `export type T${capitalizeFirstLetter(this.groupName)} =` +\n      '\\n  | ' +\n      getMembersStatementsReferences() +\n      '\\n'\n    );\n  };\n}\n"]}