{"version":3,"file":"ConfigScanner.js","sourceRoot":"","sources":["../../../src/cli/core/ConfigScanner.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport {defaultTailwindConfig} from '../lib/defaultTailwindConfig';\nimport {TTailwindCSSConfig, TConfigVariants, TConfigFuture} from '../lib/types';\nimport {TConfigTheme, TThemeItems} from '../lib/types';\n/* eslint-disable @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-return */\n\nexport class ConfigScanner {\n  private readonly future: TConfigFuture;\n  private readonly prefix: string;\n  private readonly separator: string;\n  private themeConfig: TConfigTheme;\n  private readonly variantsConfig: TConfigVariants;\n\n  constructor(tailwindConfig: TTailwindCSSConfig) {\n    this.future = tailwindConfig?.future ?? {};\n    this.prefix = _.isEmpty(tailwindConfig?.prefix) ? '' : (tailwindConfig.prefix as string);\n    this.separator = _.isEmpty(tailwindConfig.separator)\n      ? ':'\n      : (tailwindConfig.separator as string);\n    this.variantsConfig = _.isEmpty(tailwindConfig.variants)\n      ? defaultTailwindConfig.variants // Order does matter, defaultVariants will be overridden by themeVariants.\n      : {...defaultTailwindConfig.variants, ...tailwindConfig.variants};\n    this.themeConfig = {...defaultTailwindConfig.theme, ...tailwindConfig.theme};\n  }\n\n  public getPrefix = (): string => this.prefix;\n\n  public getSeparator = (): string => this.separator;\n\n  public getDeprecations = (): TConfigFuture => this.future;\n\n  public getTheme = (): TThemeItems => {\n    const evaluateCoreTheme = (): TThemeItems => {\n      const coreTheme = _.omit(this.themeConfig, 'extend');\n      const valueEvaluator = new ThemeClosuresEvaluator(coreTheme);\n      for (const [key, value] of Object.entries(this.themeConfig)) {\n        coreTheme[key as keyof TThemeItems] = valueEvaluator.evaluate(value);\n      }\n      return coreTheme;\n    };\n\n    const evaluateThemeExtend = (): Partial<TConfigTheme['extend']> => {\n      const themeExtend = this.themeConfig.extend;\n      if (themeExtend) {\n        const valueEvaluator = new ThemeClosuresEvaluator(themeExtend);\n        for (const [key, value] of Object.entries(themeExtend))\n          themeExtend[key as keyof TThemeItems] = valueEvaluator.evaluate(value);\n      }\n      return themeExtend;\n    };\n\n    this.themeConfig = _.merge(evaluateCoreTheme(), evaluateThemeExtend());\n    delete this.themeConfig?.extend;\n\n    return this.themeConfig;\n  };\n\n  public getVariants = (): TConfigVariants => this.variantsConfig;\n\n  public getThemeProperty = (\n    themeProperty: keyof TThemeItems,\n  ): [string[], Array<string | Record<string, string>>] => {\n    return [\n      Object.keys(this.getTheme()[themeProperty]),\n      Object.values(this.getTheme()[themeProperty]),\n    ];\n  };\n}\n\nclass ThemeClosuresEvaluator {\n  constructor(private themeConfig: Partial<TThemeItems>) {}\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public evaluate(value: any): any {\n    if (_.isFunction(value)) {\n      return value(this.theme, {\n        negative: ThemeClosuresEvaluator.negative.bind(this),\n        breakpoints: ThemeClosuresEvaluator.breakpoints.bind(this),\n      });\n    } else {\n      return value;\n    }\n  }\n\n  private theme = (path: string): Record<string, unknown> => {\n    return _.get(this.themeConfig, _.trim(path, `'\"`)) as Record<\n      string,\n      Record<string, string> | string\n    >;\n  };\n\n  private static negative(item: Record<string, string>): Record<string, string> {\n    const itemCopy = {...item};\n    for (const [key] of Object.entries(itemCopy)) {\n      itemCopy['-' + key] = itemCopy[key];\n      delete itemCopy[key];\n    }\n    return itemCopy;\n  }\n\n  private static breakpoints(item: Record<string, string>): Record<string, string> {\n    const itemCopy = {...item};\n    for (const [key] of Object.entries(itemCopy)) {\n      itemCopy['screen-' + key] = itemCopy[key];\n      delete itemCopy[key];\n    }\n    return itemCopy;\n  }\n}\n"]}