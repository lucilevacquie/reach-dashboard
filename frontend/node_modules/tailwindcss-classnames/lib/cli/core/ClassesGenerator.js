"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassesGenerator = void 0;
var tslib_1 = require("tslib");
var lodash_1 = tslib_1.__importDefault(require("lodash"));
var ConfigScanner_1 = require("./ConfigScanner");
var utils_1 = require("../utils");
var default_classes_1 = require("../lib/default-classes");
var ClassesGroupTemplateGenerator_1 = require("./ClassesGroupTemplateGenerator");
var ClassesGenerator = /** @class */ (function () {
    function ClassesGenerator(tailwindConfig) {
        var _this = this;
        this.generate = function () {
            var regularClassesTemplate = Object.keys(_this.generatedRegularClasses)
                .map(function (classGroup) {
                return new ClassesGroupTemplateGenerator_1.ClassesGroupTemplateGenerator(_this.generatedRegularClasses[classGroup], classGroup, _this.prefix).generate();
            })
                .join('\n');
            var pseudoClassesTemplate = 'export type TPseudoClasses =' + utils_1.generateTypes(_this.generatedPseudoClasses);
            return regularClassesTemplate + '\n\n' + pseudoClassesTemplate;
        };
        this.layout = function () {
            return tslib_1.__assign(tslib_1.__assign({}, default_classes_1.AllClasses.Layout), { objectPosition: Object.keys(_this.theme.objectPosition).map(function (x) { return 'object-' + x; }), inset: Object.keys(_this.theme.inset).flatMap(function (insetValue) {
                    return ['inset', 'inset-x', 'inset-y', 'top', 'right', 'bottom', 'left'].map(function (side) {
                        return insetValue.startsWith('-')
                            ? "-" + side + "-" + insetValue.substring(1)
                            : side + "-" + insetValue;
                    });
                }), zIndex: Object.keys(_this.theme.zIndex).flatMap(function (zIndexValue) {
                    return zIndexValue.startsWith('-') ? "-z-" + zIndexValue.substring(1) : "z-" + zIndexValue;
                }) });
        };
        this.backgrounds = function () {
            return tslib_1.__assign(tslib_1.__assign({}, default_classes_1.AllClasses.Backgrounds), { backgroundOpacity: _this.getGeneratedClassesWithOpacities().backgroundOpacities, backgroundColor: _this.generateClassesWithColors('backgroundColor'), backgroundPosition: Object.keys(_this.theme.backgroundPosition).map(function (x) { return 'bg-' + x; }), backgroundSize: Object.keys(_this.theme.backgroundSize).map(function (x) { return 'bg-' + x; }), backgroundImage: Object.keys(_this.theme.backgroundImage).map(function (x) { return 'bg-' + x; }), gradientColorStops: _this.generateClassesWithColors('gradientColorStops').flatMap(function (val) {
                    return ['from', 'via', 'to'].map(function (x) { return x + val.replace('gradient', ''); });
                }) });
        };
        this.borders = function () {
            return tslib_1.__assign(tslib_1.__assign({}, default_classes_1.AllClasses.Borders), { borderColor: _this.generateClassesWithColors('borderColor'), borderOpacity: _this.getGeneratedClassesWithOpacities().borderOpacities, borderRadius: Object.keys(_this.theme.borderRadius).flatMap(function (radius) {
                    var sides = ['t', 'r', 'b', 'l', 'tr', 'tl', 'br', 'bl'];
                    return sides.map(function (side) { return "rounded-" + side + "-" + radius; }).concat("rounded-" + radius);
                }), borderWidth: Object.keys(_this.theme.borderWidth).flatMap(function (width) {
                    var sides = ['t', 'r', 'b', 'l'];
                    return sides.map(function (side) { return "border-" + side + "-" + width; }).concat("border-" + width);
                }), divideColor: _this.generateClassesWithColors('divideColor'), divideOpacity: _this.getGeneratedClassesWithOpacities().divideOpacities, 
                // divide width inherits its values from theme.borderWidth by default
                // but theme.divideWidth overrides it.
                divideWidth: Object.keys(lodash_1.default.isEmpty(_this.theme.divideWidth) ? _this.theme.borderWidth : _this.theme.divideWidth)
                    .concat('reverse')
                    .flatMap(function (width) { return ['x', 'y'].map(function (axis) { return "divide-" + axis + "-" + width; }); }) });
        };
        this.tables = function () {
            return default_classes_1.AllClasses.Tables;
        };
        this.effects = function () {
            return tslib_1.__assign(tslib_1.__assign({}, default_classes_1.AllClasses.Effects), { boxShadow: Object.keys(_this.theme.boxShadow).map(function (key) { return "shadow-" + key; }), opacity: _this.getGeneratedClassesWithOpacities().opacities });
        };
        this.transitionsAndAnimations = function () {
            return tslib_1.__assign(tslib_1.__assign({}, default_classes_1.AllClasses.TransitionsAndAnimations), { transitionProperty: Object.keys(_this.theme.transitionProperty).map(function (property) { return 'transition-' + property; }), transitionDuration: Object.keys(_this.theme.transitionDuration).map(function (value) { return 'duration-' + value; }), transitionTimingFunction: Object.keys(_this.theme.transitionTimingFunction).map(function (value) { return 'ease-' + value; }), transitionDelay: Object.keys(_this.theme.transitionDelay).map(function (value) { return 'delay-' + value; }), animation: Object.keys(_this.theme.animation).map(function (val) { return 'animate-' + val; }) });
        };
        this.transforms = function () {
            return tslib_1.__assign(tslib_1.__assign({}, default_classes_1.AllClasses.Transforms), { scale: ['', 'x-', 'y-'].flatMap(function (x) {
                    return Object.keys(_this.theme.scale).map(function (value) { return 'scale-' + x + value; });
                }), rotate: Object.keys(_this.theme.rotate).map(function (value) {
                    return value.startsWith('-') ? '-rotate-' + value.slice(1) : "rotate-" + value;
                }), 
                // translate gets values from theme.spacing in addition to 50% and 100% variations
                // by default and theme.translate overrides this behaviour.
                translate: ['x', 'y'].flatMap(function (side) {
                    return Object.keys(lodash_1.default.isEmpty(_this.theme.translate) ? _this.theme.spacing : _this.theme.translate).map(function (value) {
                        return value.startsWith('-')
                            ? "-translate-" + side + "-" + value.slice(1)
                            : "translate-" + side + "-" + value;
                    });
                }), skew: ['x', 'y'].flatMap(function (side) {
                    return Object.keys(_this.theme.skew).map(function (value) {
                        return value.startsWith('-') ? "-skew-" + side + "-" + value.substring(1) : "skew-" + side + "-" + value;
                    });
                }), transformOrigin: Object.keys(_this.theme.transformOrigin).map(function (value) { return 'origin-' + value; }) });
        };
        this.interactivity = function () {
            return tslib_1.__assign(tslib_1.__assign({}, default_classes_1.AllClasses.Interactivity), { cursor: Object.keys(_this.theme.cursor).map(function (x) { return 'cursor-' + x; }), outline: Object.keys(_this.theme.outline).map(function (x) { return 'outline-' + x; }) });
        };
        this.SVG = function () {
            return tslib_1.__assign(tslib_1.__assign({}, default_classes_1.AllClasses.SVG), { fill: Object.keys(_this.theme.fill).map(function (value) { return 'fill-' + value; }), stroke: Object.keys(_this.theme.stroke).map(function (value) { return 'stroke-' + value; }), strokeWidth: Object.keys(_this.theme.strokeWidth).map(function (value) { return 'stroke-' + value; }) });
        };
        this.accessibility = function () {
            return default_classes_1.AllClasses.Accessibility;
        };
        this.flexBox = function () {
            return tslib_1.__assign(tslib_1.__assign({}, default_classes_1.AllClasses.FlexBox), { flexGrow: Object.keys(_this.theme.flexGrow).map(function (key) { return "flex-grow-" + key; }), flexShrink: Object.keys(_this.theme.flexShrink).map(function (key) { return "flex-shrink-" + key; }), order: Object.keys(_this.theme.order).map(function (key) { return "order-" + key; }) });
        };
        this.grid = function () {
            return tslib_1.__assign(tslib_1.__assign({}, default_classes_1.AllClasses.Grid), { gridTemplateColumns: Object.keys(_this.theme.gridTemplateColumns).map(function (key) { return "grid-cols-" + key; }), gridAutoColumns: Object.keys(_this.theme.gridAutoColumns).map(function (key) { return "auto-cols-" + key; }), gridColumn: Object.keys(_this.theme.gridColumn).map(function (key) { return "col-" + key; }), gridColumnStart: Object.keys(_this.theme.gridColumnStart).map(function (key) { return "col-start-" + key; }), gridColumnEnd: Object.keys(_this.theme.gridColumnEnd).map(function (key) { return "col-end-" + key; }), gridTemplateRows: Object.keys(_this.theme.gridTemplateRows).map(function (key) { return "grid-rows-" + key; }), gridAutoRows: Object.keys(_this.theme.gridAutoRows).map(function (key) { return "auto-rows-" + key; }), gridRow: Object.keys(_this.theme.gridRow).map(function (key) { return "row-" + key; }), gridRowStart: Object.keys(_this.theme.gridRowStart).map(function (key) { return "row-start-" + key; }), gridRowEnd: Object.keys(_this.theme.gridRowEnd).map(function (key) { return "row-end-" + key; }), gap: ['gap-', 'gap-y-', 'gap-x-']
                    .concat(_this.deprecations.removeDeprecatedGapUtilities ? [] : ['row-gap-', 'col-gap-'])
                    .flatMap(function (x) {
                    // grid gap inherits its values from theme.spacing by default, but theme.gap overrides it.
                    return Object.keys(lodash_1.default.isEmpty(_this.theme.gap) ? _this.theme.spacing : _this.theme.gap).map(function (gapValue) { return x + gapValue; });
                }) });
        };
        this.spacing = function () {
            var sides = ['', 'y', 'x', 't', 'r', 'b', 'l'];
            return {
                padding: sides.flatMap(function (side) {
                    return Object.keys(lodash_1.default.isEmpty(_this.theme.padding) ? _this.theme.spacing : _this.theme.padding).map(function (value) {
                        return value.startsWith('-') ? "-p" + side + "-" + value.slice(1) : "p" + side + "-" + value;
                    });
                }),
                margin: sides.flatMap(function (side) {
                    return Object.keys(lodash_1.default.isEmpty(_this.theme.margin) ? _this.theme.spacing : _this.theme.margin).map(function (value) {
                        return value.startsWith('-') ? "-m" + side + "-" + value.slice(1) : "m" + side + "-" + value;
                    });
                }),
                space: ['x', 'y'].flatMap(function (axis) {
                    return Object.keys(lodash_1.default.isEmpty(_this.theme.space) ? _this.theme.spacing : _this.theme.space)
                        .concat('reverse')
                        .map(function (key) {
                        if (key.startsWith('-')) {
                            key = key.slice(1);
                            return '-space-' + axis + ("-" + key);
                        }
                        else {
                            return "space-" + axis + "-" + key;
                        }
                    });
                }),
            };
        };
        this.sizing = function () {
            // prettier-ignore
            var extraWidthSizing = ['full', 'screen', 'auto', '1/2', '1/3', '2/3', '1/4', '2/4', '3/4',
                '1/5', '2/5', '3/5', '4/5', '1/6', '2/6', '3/6', '4/6', '5/6', '1/12', '2/12', '3/12', '4/12',
                '5/12', '6/12', '7/12', '8/12', '9/12', '10/12', '11/12'];
            var extraHeightSizing = ['full', 'screen'];
            return tslib_1.__assign(tslib_1.__assign({}, default_classes_1.AllClasses.Sizing), { 
                // width values come from theme.spacing + `extraWidthSizing` by default
                // and theme.width overrides this default behaviour.
                // prettier-ignore
                width: (lodash_1.default.isEmpty(_this.theme.width)
                    ? Object.keys(_this.theme.spacing).concat(extraWidthSizing)
                    : Object.keys(_this.theme.width)).map(function (x) { return 'w-' + x; }), minWidth: Object.keys(_this.theme.minWidth).map(function (x) { return 'min-w-' + x; }), maxWidth: Object.keys(_this.theme.maxWidth).map(function (x) { return 'max-w-' + x; }), 
                // height values come from theme.spacing + `extraHeightSizing` by default
                // and overridden by theme.height.
                // prettier-ignore
                height: (lodash_1.default.isEmpty(_this.theme.height)
                    ? Object.keys(_this.theme.spacing).concat(extraHeightSizing)
                    : Object.keys(_this.theme.height)).map(function (x) { return 'h-' + x; }), minHeight: Object.keys(_this.theme.minHeight).map(function (x) { return 'min-h-' + x; }), maxHeight: Object.keys(_this.theme.maxHeight).map(function (x) { return 'max-h-' + x; }) });
        };
        this.typography = function () {
            return tslib_1.__assign(tslib_1.__assign({}, default_classes_1.AllClasses.Typography), { fontFamily: Object.keys(_this.theme.fontFamily).map(function (value) { return 'font-' + value; }), fontSize: Object.keys(_this.theme.fontSize).map(function (size) { return 'text-' + size; }), fontWeight: Object.keys(_this.theme.fontWeight).map(function (weight) { return 'font-' + weight; }), letterSpacing: Object.keys(_this.theme.letterSpacing).map(function (value) { return 'tracking-' + value; }), lineHeight: Object.keys(_this.theme.lineHeight).map(function (value) { return 'leading-' + value; }), listStyleType: Object.keys(_this.theme.listStyleType).map(function (value) { return 'list-' + value; }), placeholderColor: _this.generateClassesWithColors('placeholderColor'), placeholderOpacity: _this.getGeneratedClassesWithOpacities().placeholderOpacities, textColor: _this.generateClassesWithColors('textColor'), textOpacity: _this.getGeneratedClassesWithOpacities().textOpacities });
        };
        this.pseudoClasses = function () {
            var pseudoClasses = [];
            // HACK
            var variantsConfig = Object.entries(lodash_1.default.merge(_this.configScanner.getVariants(), {
                screenReaders: _this.configScanner.getVariants().accessibility,
            }));
            var _loop_1 = function (variantsKey, variantsForKey) {
                Object.keys(_this.generatedRegularClasses).map(function (key) {
                    if (lodash_1.default.has(_this.generatedRegularClasses[key], variantsKey)) {
                        var generatedClass = lodash_1.default.get(_this.generatedRegularClasses, key + "." + variantsKey);
                        generatedClass.map(function (classname) {
                            variantsForKey.map(function (variant) {
                                if (variant === 'responsive') {
                                    var breakpoints = _this.configScanner.getThemeProperty('screens')[0];
                                    breakpoints.map(function (breakpointVariant) {
                                        pseudoClasses.push(breakpointVariant + _this.separator + _this.prefix + classname);
                                    });
                                }
                                else {
                                    pseudoClasses.push(variant + _this.separator + _this.prefix + classname);
                                    if (variant.startsWith('group') && !pseudoClasses.includes('group'))
                                        pseudoClasses.push(_this.prefix + 'group');
                                }
                            });
                        });
                    }
                });
            };
            for (var _i = 0, variantsConfig_1 = variantsConfig; _i < variantsConfig_1.length; _i++) {
                var _a = variantsConfig_1[_i], variantsKey = _a[0], variantsForKey = _a[1];
                _loop_1(variantsKey, variantsForKey);
            }
            return pseudoClasses;
        };
        this.generateClassesWithColors = function (property) {
            var _a = _this.configScanner.getThemeProperty(property), propertyKeys = _a[0], propertyValues = _a[1];
            return propertyKeys
                .filter(function (k) { return k !== 'default'; }) // exclude `default` keys
                .flatMap(function (colorName, i) {
                var colorValue = propertyValues[i]; // could be a `string` value or an `object` of shades.
                var utilName = property
                    .replace('Color', '') // gradientColorStops -> gradientStops, borderColor -> border etc.
                    .replace('Stops', '') // gradientStops -> gradient
                    .replace('background', 'bg');
                if (typeof colorValue === 'object' && colorValue !== null) {
                    return Object.keys(colorValue).map(function (shade) { return utilName + "-" + colorName + "-" + shade; });
                }
                else {
                    return utilName + "-" + colorName;
                }
            });
        };
        this.getGeneratedClassesWithOpacities = function () {
            var allOpacities = _this.configScanner.getTheme().opacity;
            var getOpacity = function (themePropertyName, outputNamePrefix) {
                var generatedOpacities = generateOpacities(allOpacities, _this.theme, themePropertyName);
                return Object.keys(generatedOpacities).map(function (opacity) { return outputNamePrefix + "-opacity-" + opacity; });
            };
            function generateOpacities(defaultOpacities, theme, property) {
                var _a;
                var themeOpacities = lodash_1.default.isEmpty(theme[property]) ? defaultOpacities : theme[property];
                var extendedThemeOpacities = (_a = theme.extend) === null || _a === void 0 ? void 0 : _a[property];
                var result = extendedThemeOpacities
                    ? tslib_1.__assign(tslib_1.__assign({}, themeOpacities), extendedThemeOpacities) : themeOpacities;
                return result;
            }
            return {
                opacities: Object.keys(allOpacities).map(function (opacity) { return "opacity-" + opacity; }),
                textOpacities: getOpacity('textOpacity', 'text'),
                backgroundOpacities: getOpacity('backgroundOpacity', 'bg'),
                borderOpacities: getOpacity('borderOpacity', 'border'),
                divideOpacities: getOpacity('divideOpacity', 'divide'),
                placeholderOpacities: getOpacity('placeholderOpacity', 'placeholder'),
            };
        };
        var configScanner = new ConfigScanner_1.ConfigScanner(tailwindConfig);
        this.prefix = configScanner.getPrefix();
        this.separator = configScanner.getSeparator();
        this.theme = configScanner.getTheme();
        this.configScanner = configScanner;
        this.deprecations = configScanner.getDeprecations();
        this.generatedRegularClasses = {
            Accessibility: this.accessibility(),
            Backgrounds: this.backgrounds(),
            Borders: this.borders(),
            Tables: this.tables(),
            Effects: this.effects(),
            TransitionsAndAnimations: this.transitionsAndAnimations(),
            FlexBox: this.flexBox(),
            Grid: this.grid(),
            Spacing: this.spacing(),
            Interactivity: this.interactivity(),
            Layout: this.layout(),
            Sizing: this.sizing(),
            SVG: this.SVG(),
            Transforms: this.transforms(),
            Typography: this.typography(),
        };
        this.generatedPseudoClasses = this.pseudoClasses();
    }
    return ClassesGenerator;
}());
exports.ClassesGenerator = ClassesGenerator;
//# sourceMappingURL=ClassesGenerator.js.map